{"version":3,"file":"index.mjs","sources":["../base/binary/lib/getter.js","../base/binary/lib/getter.accessor.js","../base/binary/lib/setter.js","../base/binary/lib/setter.accessor.js","../base/binary/lib/main.js","../base/binary/lib/binary.js","../base/binary/lib/accessors.js","../base/binary/lib/ndarray.js","../base/binary/lib/binary.ndarray.js","../base/binary/lib/accessors.ndarray.js","../dtypes/lib/main.js","../dtypes/lib/enum.js","../dtypes/lib/assign.js","../dtypes/lib/index.js","../base/dtype-enum2str/lib/index.js","../base/dtype-enum2str/lib/main.js","../base/dtype-str2enum/lib/index.js","../base/dtype-str2enum/lib/main.js","../base/dtype-resolve-enum/lib/index.js","../base/dtype-resolve-enum/lib/main.js","../base/reinterpret-complex64/lib/index.js","../base/reinterpret-complex64/lib/main.js","../base/reinterpret-complex128/lib/index.js","../base/reinterpret-complex128/lib/main.js","../base/binary-addon-dispatch/lib/binary.js","../base/offset-view/lib/index.js","../base/offset-view/lib/main.js","../base/min-view-buffer-index/lib/index.js","../base/min-view-buffer-index/lib/main.js","../base/binary-addon-dispatch/lib/main.js","../base/binary-addon-dispatch/lib/ndarray.js","../base/dtype-resolve-str/lib/index.js","../base/dtype-resolve-str/lib/main.js","../base/unary/lib/accessors.js","../base/unary/lib/getter.js","../base/unary/lib/getter.accessor.js","../base/unary/lib/setter.js","../base/unary/lib/setter.accessor.js","../base/unary/lib/main.js","../base/unary/lib/unary.js","../base/unary/lib/ndarray.js","../base/unary/lib/unary.ndarray.js","../base/unary/lib/accessors.ndarray.js","../base/unary-addon-dispatch/lib/unary.js","../base/unary-addon-dispatch/lib/main.js","../base/unary-addon-dispatch/lib/ndarray.js","../base/zmap/lib/ndarray.js","../base/lib/index.js","../base/binary/lib/index.js","../base/binary-addon-dispatch/lib/index.js","../base/binary-dtype-signatures/lib/index.js","../base/binary-dtype-signatures/lib/main.js","../base/binary-signature-callbacks/lib/index.js","../base/binary-signature-callbacks/lib/main.js","../base/cmap/lib/index.js","../base/cmap/lib/main.js","../base/cmap/lib/ndarray.js","../base/dmap/lib/index.js","../base/dmap/lib/main.js","../base/dmap/lib/ndarray.js","../base/dmap2/lib/index.js","../base/dmap2/lib/main.js","../base/dmap2/lib/ndarray.js","../base/dmskmap/lib/index.js","../base/dmskmap/lib/main.js","../base/dmskmap/lib/ndarray.js","../base/dmskmap2/lib/index.js","../base/dmskmap2/lib/main.js","../base/dmskmap2/lib/ndarray.js","../base/map-by/lib/index.js","../base/map-by/lib/main.js","../base/map-by/lib/ndarray.js","../base/map-by2/lib/index.js","../base/map-by2/lib/main.js","../base/map-by2/lib/ndarray.js","../base/max-view-buffer-index/lib/index.js","../base/max-view-buffer-index/lib/main.js","../base/meta-data-props/lib/index.js","../base/meta-data-props/lib/main.js","../base/mskunary/lib/index.js","../base/mskunary/lib/main.js","../base/mskunary/lib/ndarray.js","../base/nullary/lib/index.js","../base/nullary/lib/main.js","../base/nullary/lib/ndarray.js","../base/quaternary/lib/index.js","../base/quaternary/lib/main.js","../base/quaternary/lib/ndarray.js","../base/quinary/lib/index.js","../base/quinary/lib/main.js","../base/quinary/lib/ndarray.js","../base/smap/lib/index.js","../base/smap/lib/main.js","../base/smap/lib/ndarray.js","../base/smap2/lib/index.js","../base/smap2/lib/main.js","../base/smap2/lib/ndarray.js","../base/smskmap/lib/index.js","../base/smskmap/lib/main.js","../base/smskmap/lib/ndarray.js","../base/smskmap2/lib/index.js","../base/smskmap2/lib/main.js","../base/smskmap2/lib/ndarray.js","../base/ternary/lib/index.js","../base/ternary/lib/main.js","../base/ternary/lib/ndarray.js","../base/unary/lib/index.js","../base/unary-addon-dispatch/lib/index.js","../base/zmap/lib/index.js","../base/zmap/lib/main.js","../dispatch/lib/index_of_types.js","../dispatch/lib/main.js","../dispatch/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a strided array element.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element\n*/\nfunction getter( x, idx ) {\n\treturn x[ idx ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a strided array element using an accessor method.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element\n*/\nfunction getter( x, idx ) {\n\treturn x.get( idx );\n}\n\n\n// EXPORTS //\n\nmodule.exports = getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets a strided array element.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*/\nfunction setter( x, idx, value ) {\n\tx[ idx ] = value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets a strided array element using an accessor method.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*/\nfunction setter( x, idx, value ) {\n\tx.set( value, idx );\n}\n\n\n// EXPORTS //\n\nmodule.exports = setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar strided = require( './binary.js' );\nvar accessors = require( './accessors.js' );\nvar getIndexed = require( './getter.js' );\nvar getAccessor = require( './getter.accessor.js' );\nvar setIndexed = require( './setter.js' );\nvar setAccessor = require( './setter.accessor.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* binary( [ x, y, z ], shape, strides, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction binary( arrays, shape, strides, fcn ) {\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar x;\n\tvar y;\n\tvar z;\n\n\t// Note: we intentionally use weak checks for accessors and do not explicitly check for functions for (perhaps marginally) better performance...\n\tx = arrays[ 0 ];\n\tif ( x.get && x.set ) {\n\t\txget = getAccessor;\n\t}\n\ty = arrays[ 1 ];\n\tif ( y.get && y.set ) {\n\t\tyget = getAccessor;\n\t}\n\tz = arrays[ 2 ];\n\tif ( z.get && z.set ) {\n\t\tzset = setAccessor;\n\t}\n\tif ( xget || yget || zset ) {\n\t\txget = xget || getIndexed;\n\t\tyget = yget || getIndexed;\n\t\tzset = zset || setIndexed;\n\t\treturn accessors( arrays, shape, strides, [ xget, yget, zset ], fcn );\n\t}\n\treturn strided( arrays, shape, strides, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* binary( [ x, y, z ], shape, strides, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction binary( arrays, shape, strides, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( sy < 0 ) {\n\t\tiy = (1-N) * sy;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( sz < 0 ) {\n\t\tiz = (1-N) * sz;\n\t} else {\n\t\tiz = 0;\n\t}\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {ArrayLikeObject<Function>} accessors - array-like object containing accessors for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* binary( [ x, y, z ], shape, strides, [ get, get, set ], add );\n*\n* console.log( z );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\nfunction binary( arrays, shape, strides, accessors, fcn ) {\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( sy < 0 ) {\n\t\tiy = (1-N) * sy;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( sz < 0 ) {\n\t\tiz = (1-N) * sz;\n\t} else {\n\t\tiz = 0;\n\t}\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\txget = accessors[ 0 ];\n\tyget = accessors[ 1 ];\n\tzset = accessors[ 2 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzset( z, iz, fcn( xget( x, ix ), yget( y, iy ) ) );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar strided = require( './binary.ndarray.js' );\nvar accessors = require( './accessors.ndarray.js' );\nvar getIndexed = require( './getter.js' );\nvar getAccessor = require( './getter.accessor.js' );\nvar setIndexed = require( './setter.js' );\nvar setAccessor = require( './setter.accessor.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* binary( [ x, y, z ], shape, strides, offsets, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction binary( arrays, shape, strides, offsets, fcn ) {\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar x;\n\tvar y;\n\tvar z;\n\n\t// Note: we intentionally use weak checks for accessors and do not explicitly check for functions for (perhaps marginally) better performance...\n\tx = arrays[ 0 ];\n\tif ( x.get && x.set ) {\n\t\txget = getAccessor;\n\t}\n\ty = arrays[ 1 ];\n\tif ( y.get && y.set ) {\n\t\tyget = getAccessor;\n\t}\n\tz = arrays[ 2 ];\n\tif ( z.get && z.set ) {\n\t\tzset = setAccessor;\n\t}\n\tif ( xget || yget || zset ) {\n\t\txget = xget || getIndexed;\n\t\tyget = yget || getIndexed;\n\t\tzset = zset || setIndexed;\n\t\treturn accessors( arrays, shape, strides, offsets, [ xget, yget, zset ], fcn ); // eslint-disable-line max-len\n\t}\n\treturn strided( arrays, shape, strides, offsets, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* binary( [ x, y, z ], shape, strides, offsets, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction binary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tiz = offsets[ 2 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {ArrayLikeObject<Function>} accessors - array-like object containing accessors for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* binary( [ x, y, z ], shape, strides, offsets, [ get, get, set ], add );\n*\n* console.log( z );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\nfunction binary( arrays, shape, strides, offsets, accessors, fcn ) {\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tiz = offsets[ 2 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\txget = accessors[ 0 ];\n\tyget = accessors[ 1 ];\n\tzset = accessors[ 2 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzset( z, iz, fcn( xget( x, ix ), yget( y, iy ) ) );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar DTYPES = require( './dtypes.json' );\n\n\n// MAIN //\n\n/**\n* Returns a list of strided array data type strings.\n*\n* @returns {StringArray} list of strided array data type strings\n*\n* @example\n* var list = dtypes();\n* // returns [...]\n*/\nfunction dtypes() {\n\treturn DTYPES.slice();\n}\n\n\n// EXPORTS //\n\nmodule.exports = dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndtypes = require( '@stdlib/ndarray/dtypes' ).enum;\n\n\n// VARIABLES //\n\nvar dt = ndtypes();\n\n\n// MAIN //\n\n/**\n* Returns an object mapping supported data strings to enumeration constants for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of strided arrays.\n*\n* @private\n* @returns {Object} object mapping supported data strings strings to enumeration constants\n*\n* @example\n* var table = enumeration();\n* // returns <Object>\n*/\nfunction enumeration() {\n\t// NOTE: the returned object should match the C `dtypes.h` enumeration!!!!\n\treturn {\n\t\t'bool': dt[ 'bool' ],\n\n\t\t'int8': dt[ 'int8' ],\n\t\t'uint8': dt[ 'uint8' ],\n\t\t'uint8c': dt[ 'uint8c' ],\n\t\t'int16': dt[ 'int16' ],\n\t\t'uint16': dt[ 'uint16' ],\n\t\t'int32': dt[ 'int32' ],\n\t\t'uint32': dt[ 'uint32' ],\n\t\t'int64': dt[ 'int64' ],\n\t\t'uint64': dt[ 'uint64' ],\n\n\t\t'float32': dt[ 'float32' ],\n\t\t'float64': dt[ 'float64' ],\n\n\t\t'complex64': dt[ 'complex64' ],\n\t\t'complex128': dt[ 'complex128' ],\n\n\t\t'binary': dt[ 'binary' ],\n\n\t\t'generic': dt[ 'generic' ],\n\n\t\t'notype': dt[ 'notype' ],\n\n\t\t'userdefined_type': dt[ 'userdefined_type' ]\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = enumeration;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar objectKeys = require( '@stdlib/utils/keys' );\n\n\n// MAIN //\n\n/**\n* Copies all enumerable own properties from a source object to a target object as enumerable read-only properties.\n*\n* @private\n* @param {Object} target - target object\n* @param {Object} source - source object\n* @returns {Object} modified target object\n*\n* @example\n* var source = {\n*     'beep': 'boop'\n* };\n* var target = {};\n*\n* var out = assign( target, source );\n* // returns <Object>\n*\n* var bool = ( out === target );\n* // returns true\n*\n* var v = target.beep;\n* // returns 'boop'\n*/\nfunction assign( target, source ) {\n\tvar keys;\n\tvar k;\n\tvar i;\n\n\tkeys = objectKeys( source );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tk = keys[ i ];\n\t\tsetReadOnly( target, k, source[ k ] );\n\t}\n\treturn target;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of strided array data types.\n*\n* @module @stdlib/strided/dtypes\n*\n* @example\n* var dtypes = require( '@stdlib/strided/dtypes' );\n*\n* var list = dtypes();\n* // returns [...]\n*\n* @example\n* var enumeration = require( '@stdlib/strided/dtypes' ).enum;\n*\n* var table = enumeration();\n* // returns {...}\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar dtypes = require( './main.js' );\nvar enumeration = require( './enum.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( dtypes, 'enum', enumeration );\nassign( dtypes, enumeration() );\n\n\n// EXPORTS //\n\nmodule.exports = dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the data type string associated with a strided array data type enumeration constant.\n*\n* @module @stdlib/strided/base/dtype-enum2str\n*\n* @example\n* var str2enum = require( '@stdlib/strided/base/dtype-str2enum' );\n* var enum2str = require( '@stdlib/strided/base/dtype-enum2str' );\n*\n* var v = str2enum( 'float64' );\n* // returns <number>\n*\n* var dt = enum2str( v );\n* // returns 'float64'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar objectInverse = require( '@stdlib/utils/object-inverse' );\nvar enumeration = require( './../../../dtypes' ).enum;\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the data type string associated with a strided array data type enumeration constant.\n*\n* @param {integer} dtype - data type enumeration constant\n* @returns {(string|null)} data type string or null\n*\n* @example\n* var str2enum = require( '@stdlib/strided/base/dtype-str2enum' );\n*\n* var v = str2enum( 'float64' );\n* // returns <number>\n*\n* var dt = enum2str( v );\n* // returns 'float64'\n*/\nfunction enum2str( dtype ) {\n\tvar v = hash[ dtype ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nmodule.exports = enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the enumeration constant associated with a strided array data type string.\n*\n* @module @stdlib/strided/base/dtype-str2enum\n*\n* @example\n* var str2enum = require( '@stdlib/strided/base/dtype-str2enum' );\n*\n* var v = str2enum( 'float64' );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar enumeration = require( './../../../dtypes' ).enum;\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a strided array data type string.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} dtype - data type string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'int8' );\n* // returns <number>\n*/\nfunction str2enum( dtype ) {\n\tvar v = ENUM[ dtype ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nmodule.exports = str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the enumeration constant associated with a supported strided array data type value.\n*\n* @module @stdlib/strided/base/dtype-resolve-enum\n*\n* @example\n* var resolve = require( '@stdlib/strided/base/dtype-resolve-enum' );\n*\n* var v = resolve( 'float64' );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar enum2str = require( './../../../base/dtype-enum2str' );\nvar str2enum = require( './../../../base/dtype-str2enum' );\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported strided array data type value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} dtype - data type value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'int8' );\n* // returns <number>\n*/\nfunction resolve( dtype ) {\n\tvar t = ( typeof dtype );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( dtype ) ) ? dtype : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( dtype );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reinterpret a `Complex64Array` as a `Float32Array`.\n*\n* @module @stdlib/strided/base/reinterpret-complex64\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var reinterpret = require( '@stdlib/strided/base/reinterpret-complex64' );\n*\n* var x = new Complex64Array( 10 );\n*\n* var out = reinterpret( x, 0 );\n* // returns <Float32Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// MAIN //\n\n/**\n* Reinterprets a `Complex64Array` as a `Float32Array`.\n*\n* @param {Complex64Array} x - input array\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} `Float32Array` view\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n*\n* var x = new Complex64Array( 10 );\n*\n* var out = reinterpret( x, 0 );\n* // returns <Float32Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\nfunction reinterpret( x, offset ) {\n\treturn new Float32Array( x.buffer, x.byteOffset+(x.BYTES_PER_ELEMENT*offset), 2*(x.length-offset) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = reinterpret;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reinterpret a `Complex128Array` as a `Float64Array`.\n*\n* @module @stdlib/strided/base/reinterpret-complex128\n*\n* @example\n* var Complex128Array = require( '@stdlib/array/complex128' );\n* var reinterpret = require( '@stdlib/strided/base/reinterpret-complex128' );\n*\n* var x = new Complex128Array( 10 );\n*\n* var out = reinterpret( x, 0 );\n* // returns <Float64Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float64Array = require( '@stdlib/array/float64' );\n\n\n// MAIN //\n\n/**\n* Reinterprets a `Complex128Array` as a `Float64Array`.\n*\n* @param {Complex128Array} x - input array\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} `Float64Array` view\n*\n* @example\n* var Complex128Array = require( '@stdlib/array/complex128' );\n*\n* var x = new Complex128Array( 10 );\n*\n* var out = reinterpret( x, 0 );\n* // returns <Float64Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\nfunction reinterpret( x, offset ) {\n\treturn new Float64Array( x.buffer, x.byteOffset+(x.BYTES_PER_ELEMENT*offset), 2*(x.length-offset) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = reinterpret;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar resolve = require( './../../../base/dtype-resolve-enum' );\nvar reinterpretComplex64 = require( './../../../base/reinterpret-complex64' );\nvar reinterpretComplex128 = require( './../../../base/reinterpret-complex128' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a binary function to two input strided arrays.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideY**: `z` stride length.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type (enumeration constant).\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 3, 4 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - input array\n\t* @param {integer} strideY - `y` stride length\n\t* @param {*} dtypeZ - `z` data type\n\t* @param {Collection} z - destination array\n\t* @param {integer} strideZ - `z` stride length\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `z`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n\t\tvar viewX;\n\t\tvar viewY;\n\t\tvar viewZ;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif (\n\t\t\t!isTypedArrayLike( x ) ||\n\t\t\t!isTypedArrayLike( y ) ||\n\t\t\t!isTypedArrayLike( z )\n\t\t) {\n\t\t\tfallback( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ );\n\t\t\treturn z;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tdtypeZ = resolve( dtypeZ );\n\t\tif ( dtypeX === null || dtypeY === null || dtypeZ === null ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, 0 );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, 0 );\n\t\t} else {\n\t\t\tviewX = x;\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, 0 );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, 0 );\n\t\t} else {\n\t\t\tviewY = y;\n\t\t}\n\t\tif ( dtypeZ === COMPLEX64 ) {\n\t\t\tviewZ = reinterpretComplex64( z, 0 );\n\t\t} else if ( dtypeZ === COMPLEX128 ) {\n\t\t\tviewZ = reinterpretComplex128( z, 0 );\n\t\t} else {\n\t\t\tviewZ = z;\n\t\t}\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY, dtypeZ, viewZ, strideZ );\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a typed array view having the same data type as a provided input typed array and starting at a specified index offset.\n*\n* @module @stdlib/strided/base/offset-view\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var offsetView = require( '@stdlib/strided/base/offset-view' );\n*\n* var x = new Float64Array( 10 );\n*\n* var out = offsetView( x, 0 );\n* // returns <Float64Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a typed array view having the same data type as a provided input typed array and starting at a specified index offset.\n*\n* @param {(TypedArray|ComplexArray)} x - input array\n* @param {NonNegativeInteger} offset - starting index\n* @returns {(TypedArray|ComplexArray)} typed array view\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var x = new Float64Array( 10 );\n*\n* var out = offsetView( x, 0 );\n* // returns <Float64Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\nfunction offsetView( x, offset ) {\n\treturn new x.constructor( x.buffer, x.byteOffset+(x.BYTES_PER_ELEMENT*offset), x.length-offset ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = offsetView;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the minimum accessible index based on a set of provided strided array parameters.\n*\n* @module @stdlib/strided/base/min-view-buffer-index\n*\n* @example\n* var minViewBufferIndex = require( '@stdlib/strided/base/min-view-buffer-index' );\n*\n* var idx = minViewBufferIndex( 3, -2, 10 );\n* // returns 6\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the minimum accessible index based on a set of provided strided array parameters.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NonNegativeInteger} index\n*\n* @example\n* var idx = minViewBufferIndex( 3, -2, 10 );\n* // returns 6\n*/\nfunction minViewBufferIndex( N, stride, offset ) {\n\tif ( N > 0 && stride < 0 ) {\n\t\toffset += (N-1) * stride; // decrements the offset\n\t}\n\treturn offset;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minViewBufferIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar binary = require( './binary.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( binary, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar resolve = require( './../../../base/dtype-resolve-enum' );\nvar reinterpretComplex64 = require( './../../../base/reinterpret-complex64' );\nvar reinterpretComplex128 = require( './../../../base/reinterpret-complex128' );\nvar offsetView = require( './../../../base/offset-view' );\nvar minViewBufferIndex = require( './../../../base/min-view-buffer-index' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a binary function to two input arrays using alternative indexing semantics.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*     -   **offsetZ**: starting `z` index.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type (enumeration constant).\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*     -   **offsetZ**: starting `z` index.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 0, 'generic', [ 3, 4 ], 1, 0, 'generic', [ 0, 0 ], 1, 0 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {NonNegativeInteger} offsetX - starting `x` index\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - input array\n\t* @param {integer} strideY - `y` stride length\n\t* @param {NonNegativeInteger} offsetY - starting `y` index\n\t* @param {*} dtypeZ - `z` data type\n\t* @param {Collection} z - destination array\n\t* @param {integer} strideZ - `z` stride length\n\t* @param {NonNegativeInteger} offsetZ - starting `z` index\n\t* @throws {TypeError} fifth argument must be a nonnegative integer\n\t* @throws {TypeError} ninth argument must be a nonnegative integer\n\t* @throws {TypeError} thirteenth argument must be a nonnegative integer\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `z`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ ) { // eslint-disable-line max-params\n\t\tvar viewX;\n\t\tvar viewY;\n\t\tvar viewZ;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif (\n\t\t\t!isTypedArrayLike( x ) ||\n\t\t\t!isTypedArrayLike( y ) ||\n\t\t\t!isTypedArrayLike( z )\n\t\t) {\n\t\t\tfallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ );\n\t\t\treturn z;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tdtypeZ = resolve( dtypeZ );\n\t\tif ( dtypeX === null || dtypeY === null || dtypeZ === null ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetX ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First input array offset must be a nonnegative integer. Value: `%s`.', offsetX ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetY ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second input array offset must be a nonnegative integer. Value: `%s`.', offsetY ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetZ ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output array offset must be a nonnegative integer. Value: `%s`.', offsetZ ) );\n\t\t}\n\t\toffsetX = minViewBufferIndex( N, strideX, offsetX );\n\t\toffsetY = minViewBufferIndex( N, strideY, offsetY );\n\t\toffsetZ = minViewBufferIndex( N, strideZ, offsetZ );\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, offsetX );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, offsetX );\n\t\t} else {\n\t\t\tviewX = offsetView( x, offsetX );\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, offsetY );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, offsetY );\n\t\t} else {\n\t\t\tviewY = offsetView( y, offsetY );\n\t\t}\n\t\tif ( dtypeZ === COMPLEX64 ) {\n\t\t\tviewZ = reinterpretComplex64( z, offsetZ );\n\t\t} else if ( dtypeZ === COMPLEX128 ) {\n\t\t\tviewZ = reinterpretComplex128( z, offsetZ );\n\t\t} else {\n\t\t\tviewZ = offsetView( z, offsetZ );\n\t\t}\n\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY, dtypeZ, viewZ, strideZ );\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the data type string associated with a supported strided array data type value.\n*\n* @module @stdlib/strided/base/dtype-resolve-str\n*\n* @example\n* var str2enum = require( '@stdlib/strided/base/dtype-str2enum' );\n* var resolve = require( '@stdlib/strided/base/dtype-resolve-str' );\n*\n* var v = resolve( str2enum( 'float64' ) );\n* // returns 'float64'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar enum2str = require( './../../../base/dtype-enum2str' );\nvar str2enum = require( './../../../base/dtype-str2enum' );\n\n\n// MAIN //\n\n/**\n* Returns the data type string associated with a supported strided array data type value.\n*\n* @param {*} dtype - data type value\n* @returns {(string|null)} data type string or null\n*\n* @example\n* var str2enum = require( '@stdlib/strided/base/dtype-str2enum' );\n*\n* var v = resolve( str2enum( 'float64' ) );\n* // returns 'float64'\n*/\nfunction resolve( dtype ) {\n\tvar t = ( typeof dtype );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( dtype ) ) ? dtype : null;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( dtype );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {ArrayLikeObject<Function>} accessors - array-like object containing accessors for the input and output arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unary( [ x, y ], shape, strides, [ get, set ], scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*/\nfunction unary( arrays, shape, strides, accessors, fcn ) {\n\tvar xget;\n\tvar yset;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( sy < 0 ) {\n\t\tiy = (1-N) * sy;\n\t} else {\n\t\tiy = 0;\n\t}\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\txget = accessors[ 0 ];\n\tyset = accessors[ 1 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tyset( y, iy, fcn( xget( x, ix ) ) );\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a strided array element.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element\n*/\nfunction getter( x, idx ) {\n\treturn x[ idx ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a strided array element using an accessor method.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element\n*/\nfunction getter( x, idx ) {\n\treturn x.get( idx );\n}\n\n\n// EXPORTS //\n\nmodule.exports = getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets a strided array element.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*/\nfunction setter( x, idx, value ) {\n\tx[ idx ] = value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets a strided array element using an accessor method.\n*\n* @private\n* @param {Collection} x - strided array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*/\nfunction setter( x, idx, value ) {\n\tx.set( value, idx );\n}\n\n\n// EXPORTS //\n\nmodule.exports = setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar strided = require( './unary.js' );\nvar accessors = require( './accessors.js' );\nvar getIndexed = require( './getter.js' );\nvar getAccessor = require( './getter.accessor.js' );\nvar setIndexed = require( './setter.js' );\nvar setAccessor = require( './setter.accessor.js' );\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unary( [ x, y ], shape, strides, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction unary( arrays, shape, strides, fcn ) {\n\tvar xget;\n\tvar yset;\n\tvar x;\n\tvar y;\n\n\t// Note: we intentionally use weak checks for accessors and do not explicitly check for functions for (perhaps marginally) better performance...\n\tx = arrays[ 0 ];\n\tif ( x.get && x.set ) {\n\t\txget = getAccessor;\n\t}\n\ty = arrays[ 1 ];\n\tif ( y.get && y.set ) {\n\t\tyset = setAccessor;\n\t}\n\tif ( xget || yset ) {\n\t\txget = xget || getIndexed;\n\t\tyset = yset || setIndexed;\n\t\treturn accessors( arrays, shape, strides, [ xget, yset ], fcn );\n\t}\n\treturn strided( arrays, shape, strides, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unary( [ x, y ], shape, strides, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction unary( arrays, shape, strides, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( sy < 0 ) {\n\t\tiy = (1-N) * sy;\n\t} else {\n\t\tiy = 0;\n\t}\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = fcn( x[ ix ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar strided = require( './unary.ndarray.js' );\nvar accessors = require( './accessors.ndarray.js' );\nvar getIndexed = require( './getter.js' );\nvar getAccessor = require( './getter.accessor.js' );\nvar setIndexed = require( './setter.js' );\nvar setAccessor = require( './setter.accessor.js' );\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unary( [ x, y ], shape, strides, offsets, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction unary( arrays, shape, strides, offsets, fcn ) {\n\tvar xget;\n\tvar yset;\n\tvar x;\n\tvar y;\n\n\t// Note: we intentionally use weak checks for accessors and do not explicitly check for functions for (perhaps marginally) better performance...\n\tx = arrays[ 0 ];\n\tif ( x.get && x.set ) {\n\t\txget = getAccessor;\n\t}\n\ty = arrays[ 1 ];\n\tif ( y.get && y.set ) {\n\t\tyset = setAccessor;\n\t}\n\tif ( xget || yset ) {\n\t\txget = xget || getIndexed;\n\t\tyset = yset || setIndexed;\n\t\treturn accessors( arrays, shape, strides, offsets, [ xget, yset ], fcn ); // eslint-disable-line max-len\n\t}\n\treturn strided( arrays, shape, strides, offsets, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unary( [ x, y ], shape, strides, offsets, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction unary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = fcn( x[ ix ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {ArrayLikeObject<Function>} accessors - array-like object containing accessors for the input and output arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unary( [ x, y ], shape, strides, offsets, [ get, set ], scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*/\nfunction unary( arrays, shape, strides, offsets, accessors, fcn ) {\n\tvar xget;\n\tvar yset;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\txget = accessors[ 0 ];\n\tyset = accessors[ 1 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tyset( y, iy, fcn( xget( x, ix ) ) );\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar resolve = require( './../../../base/dtype-resolve-enum' );\nvar reinterpretComplex64 = require( './../../../base/reinterpret-complex64' );\nvar reinterpretComplex128 = require( './../../../base/reinterpret-complex128' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a unary function to an input strided array.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - destination array\n\t* @param {integer} strideY - `y` stride length\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `y`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n\t\tvar viewX;\n\t\tvar viewY;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif ( !isTypedArrayLike( x ) || !isTypedArrayLike( y ) ) {\n\t\t\tfallback( N, dtypeX, x, strideX, dtypeY, y, strideY );\n\t\t\treturn y;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tif ( dtypeX === null || dtypeY === null ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, 0 );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, 0 );\n\t\t} else {\n\t\t\tviewX = x;\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, 0 );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, 0 );\n\t\t} else {\n\t\t\tviewY = y;\n\t\t}\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY );\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar unary = require( './unary.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( unary, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar resolve = require( './../../../base/dtype-resolve-enum' );\nvar reinterpretComplex64 = require( './../../../base/reinterpret-complex64' );\nvar reinterpretComplex128 = require( './../../../base/reinterpret-complex128' );\nvar offsetView = require( './../../../base/offset-view' );\nvar minViewBufferIndex = require( './../../../base/min-view-buffer-index' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a unary function to an input array using alternative indexing semantics.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: output array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 0, 'generic', [ 0, 0 ], 1, 0 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {NonNegativeInteger} offsetX - starting `x` index\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - destination array\n\t* @param {integer} strideY - `y` stride length\n\t* @param {NonNegativeInteger} offsetY - starting `y` index\n\t* @throws {TypeError} fifth argument must be a nonnegative integer\n\t* @throws {TypeError} ninth argument must be a nonnegative integer\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `y`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY ) { // eslint-disable-line max-len\n\t\tvar viewX;\n\t\tvar viewY;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif ( !isTypedArrayLike( x ) || !isTypedArrayLike( y ) ) {\n\t\t\tfallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tif ( dtypeX === null || dtypeY === null ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetX ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Input array offset must be a nonnegative integer. Value: `%s`.', offsetX ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetY ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output array offset must be a nonnegative integer. Value: `%s`.' ) );\n\t\t}\n\t\toffsetX = minViewBufferIndex( N, strideX, offsetX );\n\t\toffsetY = minViewBufferIndex( N, strideY, offsetY );\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, offsetX );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, offsetX );\n\t\t} else {\n\t\t\tviewX = offsetView( x, offsetX );\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, offsetY );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, offsetY );\n\t\t} else {\n\t\t\tviewY = offsetView( y, offsetY );\n\t\t}\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY );\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a double-precision complex floating-point strided input array and assigns results to a double-precision complex floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex128Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Function} fcn - unary function to apply\n* @returns {Complex128Array} `y`\n*\n* @example\n* var Complex128Array = require( '@stdlib/array/complex128' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n* var Complex128 = require( '@stdlib/complex/float64' );\n*\n* function scale( x ) {\n*     var re = real( x );\n*     var im = imag( x );\n*     return new Complex128( re*10.0, im*10.0 );\n* }\n*\n* var x = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0 ] );\n* var y = new Complex128Array( x.length );\n*\n* zmap( x.length, x, 1, 0, y, 1, 0, scale );\n*\n* var v = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 10.0\n*/\nfunction zmap( N, x, strideX, offsetX, y, strideY, offsetY, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty.set( fcn( x.get( ix ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name binary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/binary}\n*/\nsetReadOnly( ns, 'binary', require( './../../base/binary' ) );\n\n/**\n* @name binaryAddonDispatch\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/binary-addon-dispatch}\n*/\nsetReadOnly( ns, 'binaryAddonDispatch', require( './../../base/binary-addon-dispatch' ) );\n\n/**\n* @name binaryDtypeSignatures\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/binary-dtype-signatures}\n*/\nsetReadOnly( ns, 'binaryDtypeSignatures', require( './../../base/binary-dtype-signatures' ) );\n\n/**\n* @name binarySignatureCallbacks\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/binary-signature-callbacks}\n*/\nsetReadOnly( ns, 'binarySignatureCallbacks', require( './../../base/binary-signature-callbacks' ) );\n\n/**\n* @name cmap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/cmap}\n*/\nsetReadOnly( ns, 'cmap', require( './../../base/cmap' ) );\n\n/**\n* @name dmap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/dmap}\n*/\nsetReadOnly( ns, 'dmap', require( './../../base/dmap' ) );\n\n/**\n* @name dmap2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/dmap2}\n*/\nsetReadOnly( ns, 'dmap2', require( './../../base/dmap2' ) );\n\n/**\n* @name dmskmap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/dmskmap}\n*/\nsetReadOnly( ns, 'dmskmap', require( './../../base/dmskmap' ) );\n\n/**\n* @name dmskmap2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/dmskmap2}\n*/\nsetReadOnly( ns, 'dmskmap2', require( './../../base/dmskmap2' ) );\n\n/**\n* @name dtypeEnum2Str\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/dtype-enum2str}\n*/\nsetReadOnly( ns, 'dtypeEnum2Str', require( './../../base/dtype-enum2str' ) );\n\n/**\n* @name dtypeResolveEnum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/dtype-resolve-enum}\n*/\nsetReadOnly( ns, 'dtypeResolveEnum', require( './../../base/dtype-resolve-enum' ) );\n\n/**\n* @name dtypeResolveStr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/dtype-resolve-str}\n*/\nsetReadOnly( ns, 'dtypeResolveStr', require( './../../base/dtype-resolve-str' ) );\n\n/**\n* @name dtypeStr2Enum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/dtype-str2enum}\n*/\nsetReadOnly( ns, 'dtypeStr2Enum', require( './../../base/dtype-str2enum' ) );\n\n/**\n* @name mapBy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/map-by}\n*/\nsetReadOnly( ns, 'mapBy', require( './../../base/map-by' ) );\n\n/**\n* @name mapBy2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/map-by2}\n*/\nsetReadOnly( ns, 'mapBy2', require( './../../base/map-by2' ) );\n\n/**\n* @name maxViewBufferIndex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/max-view-buffer-index}\n*/\nsetReadOnly( ns, 'maxViewBufferIndex', require( './../../base/max-view-buffer-index' ) );\n\n/**\n* @name metaDataProps\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/meta-data-props}\n*/\nsetReadOnly( ns, 'metaDataProps', require( './../../base/meta-data-props' ) );\n\n/**\n* @name minViewBufferIndex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/min-view-buffer-index}\n*/\nsetReadOnly( ns, 'minViewBufferIndex', require( './../../base/min-view-buffer-index' ) );\n\n/**\n* @name mskunary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/mskunary}\n*/\nsetReadOnly( ns, 'mskunary', require( './../../base/mskunary' ) );\n\n/**\n* @name nullary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/nullary}\n*/\nsetReadOnly( ns, 'nullary', require( './../../base/nullary' ) );\n\n/**\n* @name offsetView\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/offset-view}\n*/\nsetReadOnly( ns, 'offsetView', require( './../../base/offset-view' ) );\n\n/**\n* @name quaternary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/quaternary}\n*/\nsetReadOnly( ns, 'quaternary', require( './../../base/quaternary' ) );\n\n/**\n* @name quinary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/quinary}\n*/\nsetReadOnly( ns, 'quinary', require( './../../base/quinary' ) );\n\n/**\n* @name reinterpretComplex64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/reinterpret-complex64}\n*/\nsetReadOnly( ns, 'reinterpretComplex64', require( './../../base/reinterpret-complex64' ) );\n\n/**\n* @name reinterpretComplex128\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/reinterpret-complex128}\n*/\nsetReadOnly( ns, 'reinterpretComplex128', require( './../../base/reinterpret-complex128' ) );\n\n/**\n* @name smap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/smap}\n*/\nsetReadOnly( ns, 'smap', require( './../../base/smap' ) );\n\n/**\n* @name smap2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/smap2}\n*/\nsetReadOnly( ns, 'smap2', require( './../../base/smap2' ) );\n\n/**\n* @name smskmap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/smskmap}\n*/\nsetReadOnly( ns, 'smskmap', require( './../../base/smskmap' ) );\n\n/**\n* @name smskmap2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/smskmap2}\n*/\nsetReadOnly( ns, 'smskmap2', require( './../../base/smskmap2' ) );\n\n/**\n* @name ternary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/ternary}\n*/\nsetReadOnly( ns, 'ternary', require( './../../base/ternary' ) );\n\n/**\n* @name unary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/unary}\n*/\nsetReadOnly( ns, 'unary', require( './../../base/unary' ) );\n\n/**\n* @name unaryAddonDispatch\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/unary-addon-dispatch}\n*/\nsetReadOnly( ns, 'unaryAddonDispatch', require( './../../base/unary-addon-dispatch' ) );\n\n/**\n* @name zmap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/base/zmap}\n*/\nsetReadOnly( ns, 'zmap', require( './../../base/zmap' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary callback to strided input array elements and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided/base/binary\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var binary = require( '@stdlib/strided/base/binary' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* binary( [ x, y, z ], shape, strides, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var binary = require( '@stdlib/strided/base/binary' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* binary.ndarray( [ x, y, z ], shape, strides, offsets, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar binary = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( binary, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Dispatch to a native add-on applying a binary function to two input strided arrays.\n*\n* @module @stdlib/strided/base/binary-addon-dispatch\n*\n* @example\n* var dispatch = require( '@stdlib/strided/base/binary-addon-dispatch' );\n*\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 3, 4 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a list of binary interface signatures from strided array data types.\n*\n* @module @stdlib/strided/base/binary-dtype-signatures\n*\n* @example\n* var signatures = require( '@stdlib/strided/base/binary-dtype-signatures' );\n*\n* var dtypes = [\n*     'float64',\n*     'float32',\n*     'int32',\n*     'uint8'\n* ];\n*\n* var sigs = signatures( dtypes, dtypes, dtypes );\n* // returns [ 'float64', 'float64', 'float64', ... ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar promotionRules = require( '@stdlib/ndarray/promotion-rules' );\nvar safeCasts = require( '@stdlib/ndarray/safe-casts' );\nvar resolveEnum = require( './../../../base/dtype-resolve-enum' );\nvar resolveStr = require( './../../../base/dtype-resolve-str' );\nvar format = require( '@stdlib/string/format' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the intersection of two sorted lists.\n*\n* @private\n* @param {ArrayLikeObject} list1 - first sorted list\n* @param {ArrayLikeObject} list2 - second sorted list\n* @returns {ArrayLikeObject} result\n*\n* @example\n* var list1 = [ 'a', 'b', 'c', 'd' ];\n* var list2 = [ 'b', 'd', 'e' ];\n*\n* var out = intersection( list1, list2 );\n* // returns [ 'b', 'd' ]\n*/\nfunction intersection( list1, list2 ) {\n\tvar out;\n\tvar M;\n\tvar N;\n\tvar v;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tM = list1.length;\n\tN = list2.length;\n\n\tout = [];\n\tk = 0;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tif ( k >= N ) {\n\t\t\tbreak;\n\t\t}\n\t\tv = list1[ i ];\n\t\tfor ( j = k; j < N; j++ ) {\n\t\t\tif ( v === list2[ j ] ) {\n\t\t\t\tk = j + 1;\n\t\t\t\tout.push( v );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn out;\n}\n\n/**\n* Resolves a list of data types to data type strings.\n*\n* @private\n* @param {ArrayLikeObject} dtypes - list of data types\n* @returns {(StringArray|Error)} data type strings (or an error)\n*\n* @example\n* var out = resolve( [ 1, 2, 3 ] );\n* // returns [...]\n*/\nfunction resolve( dtypes ) {\n\tvar out;\n\tvar dt;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < dtypes.length; i++ ) {\n\t\tdt = resolveStr( dtypes[ i ] );\n\t\tif ( dt === null ) {\n\t\t\treturn new TypeError( format( 'invalid argument. Must provided recognized data types. Unable to resolve a data type string. Value: `%s`.', dtypes[ i ] ) );\n\t\t}\n\t\tout.push( dt );\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates a list of binary interface signatures from strided array data types.\n*\n* ## Notes\n*\n* -   The function returns a strided array having a stride length of `3` (i.e., every `3` elements define a binary interface signature).\n* -   For each signature (i.e., set of three consecutive non-overlapping strided array elements), the first two elements are the input data types and the third element is the return data type.\n* -   All signatures follow type promotion rules.\n*\n* @param {Array} dtypes1 - list of supported data types for the first argument\n* @param {Array} dtypes2 - list of supported data types for the second argument\n* @param {Array} dtypes3 - list of supported data types for the output\n* @param {Options} [options] - options\n* @param {boolean} [options.enums=false] - boolean flag indicating whether to return signatures as a list of enumeration constants\n* @throws {TypeError} must provide recognized data types\n* @returns {Array} strided array containing binary interface signatures\n*\n* @example\n* var dtypes = [\n*     'float64',\n*     'float32',\n*     'int32',\n*     'uint8'\n* ];\n*\n* var sigs = signatures( dtypes, dtypes, dtypes );\n* // returns [ 'float32', 'float32', 'float32', ... ]\n*/\nfunction signatures( dtypes1, dtypes2, dtypes3, options ) {\n\tvar cache;\n\tvar casts;\n\tvar opts;\n\tvar tmp;\n\tvar out;\n\tvar dt1;\n\tvar dt2;\n\tvar dt3;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar t4;\n\tvar M;\n\tvar N;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Resolve the list of provided data types to data type strings:\n\tdt1 = resolve( dtypes1 );\n\tif ( dt1 instanceof Error ) {\n\t\tthrow dt1;\n\t}\n\tif ( dtypes2 === dtypes1 ) { // don't do work if we don't need to\n\t\tdt2 = dt1;\n\t} else {\n\t\tdt2 = resolve( dtypes2 );\n\t\tif ( dt2 instanceof Error ) {\n\t\t\tthrow dt2;\n\t\t}\n\t}\n\tif ( dtypes3 === dtypes1 ) { // don't do work if we don't need to\n\t\tdt3 = dt1;\n\t} else if ( dtypes3 === dtypes2 ) {\n\t\tdt3 = dt2;\n\t} else {\n\t\tdt3 = resolve( dtypes3 );\n\t\tif ( dt3 instanceof Error ) {\n\t\t\tthrow dt3;\n\t\t}\n\t}\n\t// Sort the list of return dtypes:\n\tdt3.sort();\n\n\t// Initialize a cache for storing the safe casts for promoted dtypes:\n\tcache = {};\n\n\t// Generate the list of signatures...\n\tM = dt1.length;\n\tN = dt2.length;\n\tout = [];\n\tfor ( i = 0; i < M; i++ ) {\n\t\tt1 = dt1[ i ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tt2 = dt2[ j ];\n\n\t\t\t// Resolve the promoted dtype for the current dtype pair:\n\t\t\tt3 = promotionRules( t1, t2 );\n\n\t\t\t// Check whether the dtype pair promotes...\n\t\t\tif ( t3 === -1 || t3 === null ) {\n\t\t\t\t// The dtype pair does not promote:\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tout.push( t1, t2, t3 );\n\n\t\t\t// Retrieve the allowed casts for the promoted dtype:\n\t\t\tcasts = cache[ t3 ];\n\n\t\t\t// If a list of allowed casts is not in the cache, we need to resolve them...\n\t\t\tif ( casts === void 0 ) {\n\t\t\t\t// Resolve the list of safe casts for the promoted dtype:\n\t\t\t\tcasts = safeCasts( t3 );\n\n\t\t\t\t// Remove safe casts which are not among the supported output dtypes:\n\t\t\t\tcasts = intersection( dt3, casts.sort() );\n\n\t\t\t\t// Store the list of safe casts in the cache:\n\t\t\t\tcache[ t3 ] = casts;\n\t\t\t}\n\t\t\t// Generate signatures for allowed casts...\n\t\t\tfor ( k = 0; k < casts.length; k++ ) {\n\t\t\t\tt4 = casts[ k ];\n\t\t\t\tif ( t4 !== t3 ) {\n\t\t\t\t\tout.push( t1, t2, t4 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ( opts.enums ) {\n\t\ttmp = [];\n\t\tfor ( i = 0; i < out.length; i++ ) {\n\t\t\ttmp.push( resolveEnum( out[ i ] ) );\n\t\t}\n\t\tout = tmp;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = signatures;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Assign callbacks to binary interfaces according to type promotion rules.\n*\n* @module @stdlib/strided/base/binary-signature-callbacks\n*\n* @example\n* var signatures = require( '@stdlib/strided/base/binary-dtype-signatures' );\n* var add = require( '@stdlib/math/base/ops/add' );\n* var cadd = require( '@stdlib/math/base/ops/cadd' );\n* var caddf = require( '@stdlib/math/base/ops/caddf' );\n* var callbacks = require( '@stdlib/strided/base/binary-signature-callbacks' );\n*\n* var dtypes = [\n*     'float64',\n*     'float32',\n*     'int32',\n*     'uint8'\n* ];\n*\n* var sigs = signatures( dtypes, dtypes, dtypes );\n* // returns [...]\n*\n* var table = {\n*     'default': add,\n*     'complex64': caddf,\n*     'complex128': cadd\n* };\n*\n* var list = callbacks( table, sigs );\n* // returns [...]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( './../../../base/dtype-resolve-str' );\nvar Complex64 = require( '@stdlib/complex/float32' );\nvar Complex128 = require( '@stdlib/complex/float64' );\nvar wrap = require( '@stdlib/complex/base/wrap-function' );\n\n\n// VARIABLES //\n\nvar C64 = 'complex64';\nvar C128 = 'complex128';\nvar CTORS = {\n\t'complex64': Complex64,\n\t'complex128': Complex128\n};\n\n\n// FUNCTIONS //\n\n/**\n* Resolves a callback based on provided dtypes.\n*\n* @private\n* @param {Object} table - callback table\n* @param {Function} table.default - default callback\n* @param {Function} table.complex64 - callback for single-precision complex floating-point numbers\n* @param {Function} table.complex128 - callback for double-precision complex floating-point numbers\n* @param {string} t1 - dtype for first argument\n* @param {string} t2 - dtype for second argument\n* @param {string} t3 - dtype for return value\n* @returns {Function} callback\n*/\nfunction resolveCallback( table, t1, t2, t3 ) {\n\tif ( t3 === C64 || t3 === C128 ) {\n\t\tif ( t1 === t2 && t2 === t3 ) {\n\t\t\treturn table[ t3 ];\n\t\t}\n\t\treturn wrap( table[ t3 ], 2, CTORS[ t3 ] );\n\t}\n\tif ( t3 === 'generic' ) {\n\t\tif ( t1 === C128 || t2 === C128 ) {\n\t\t\tif ( t1 === t2 ) {\n\t\t\t\treturn table[ t1 ];\n\t\t\t}\n\t\t\treturn wrap( table[ C128 ], 2, CTORS[ C128 ] );\n\t\t}\n\t\tif ( t1 === C64 || t2 === C64 ) {\n\t\t\tif ( t1 === t2 ) {\n\t\t\t\treturn table[ t1 ];\n\t\t\t}\n\t\t\treturn wrap( table[ C64 ], 2, CTORS[ C64 ] );\n\t\t}\n\t\t// Fall-through...\n\t}\n\treturn table.default;\n}\n\n\n// MAIN //\n\n/**\n* Assigns callbacks to binary interfaces according to type promotion rules.\n*\n* ## Notes\n*\n* -   The function assumes that the provided signature array has the following properties:\n*\n*     -   a strided array having a stride length of `3` (i.e., every `3` elements define a binary interface signature).\n*     -   for each signature (i.e., set of three consecutive non-overlapping strided array elements), the first two elements are the input data types and the third element is the return data type.\n*     -   all signatures follow type promotion rules.\n*\n* -   Based on type promotion rules, we can simply use the callback for `float64` (i.e., the assumed \"default\") for all interfaces not involving complex numbers, even for `float32`, as we shouldn't need to explicitly downcast strided array values. The only time we need to return `float32` values is when input arrays are already `float32` or of a type which can be safely represented in `float32` without concern for truncation.\n*\n* @param {Object} table - callback table\n* @param {Function} table.default - default callback\n* @param {Function} table.complex64 - callback for single-precision complex floating-point numbers\n* @param {Function} table.complex128 - callback for double-precision complex floating-point numbers\n* @param {ArrayLikeObject} signatures - strided array containing binary interface signatures\n* @returns {Array<Function>} list of callbacks\n*\n* @example\n* var signatures = require( '@stdlib/strided/base/binary-dtype-signatures' );\n* var add = require( '@stdlib/math/base/ops/add' );\n* var cadd = require( '@stdlib/math/base/ops/cadd' );\n* var caddf = require( '@stdlib/math/base/ops/caddf' );\n*\n* var dtypes = [\n*     'float64',\n*     'float32',\n*     'int32',\n*     'uint8'\n* ];\n*\n* var sigs = signatures( dtypes, dtypes, dtypes );\n* // returns [...]\n*\n* var table = {\n*     'default': add,\n*     'complex64': caddf,\n*     'complex128': cadd\n* };\n*\n* var list = callbacks( table, sigs );\n* // returns [...]\n*/\nfunction callbacks( table, signatures ) {\n\tvar out;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < signatures.length; i += 3 ) {\n\t\tt1 = resolve( signatures[ i ] );\n\t\tt2 = resolve( signatures[ i+1 ] );\n\t\tt3 = resolve( signatures[ i+2 ] );\n\t\tout.push( resolveCallback( table, t1, t2, t3 ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = callbacks;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary function to a single-precision floating-point strided input array and assign results to a single-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/cmap\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var cmap = require( '@stdlib/strided/base/cmap' );\n*\n* function scale( x ) {\n*     var re = real( x );\n*     var im = imag( x );\n*     return new Complex64( re*10.0, im*10.0 );\n* }\n*\n* var x = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0 ] );\n* var y = new Complex64Array( x.length );\n*\n* cmap( x.length, x, 1, y, 1, scale );\n*\n* var v = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 10.0\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var cmap = require( '@stdlib/strided/base/cmap' );\n*\n* function scale( x ) {\n*     var re = real( x );\n*     var im = imag( x );\n*     return new Complex64( re*10.0, im*10.0 );\n* }\n*\n* var x = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0 ] );\n* var y = new Complex64Array( x.length );\n*\n* cmap.ndarray( x.length, x, 1, 0, y, 1, 0, scale );\n*\n* var v = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 10.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a single-precision complex floating-point strided input array and assigns results to a single-precision complex floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {Function} fcn - unary function to apply\n* @returns {Complex64Array} `y`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n* var Complex64 = require( '@stdlib/complex/float32' );\n*\n* function scale( x ) {\n*     var re = real( x );\n*     var im = imag( x );\n*     return new Complex64( re*10.0, im*10.0 );\n* }\n*\n* var x = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0 ] );\n* var y = new Complex64Array( x.length );\n*\n* cmap( x.length, x, 1, y, 1, scale );\n*\n* var v = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 10.0\n*/\nfunction cmap( N, x, strideX, y, strideY, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty.set( fcn( x.get( ix ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a single-precision complex floating-point strided input array and assigns results to a single-precision complex floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Complex64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Function} fcn - unary function to apply\n* @returns {Complex64Array} `y`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array/complex64' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n* var Complex64 = require( '@stdlib/complex/float32' );\n*\n* function scale( x ) {\n*     var re = real( x );\n*     var im = imag( x );\n*     return new Complex64( re*10.0, im*10.0 );\n* }\n*\n* var x = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0 ] );\n* var y = new Complex64Array( x.length );\n*\n* cmap( x.length, x, 1, 0, y, 1, 0, scale );\n*\n* var v = y.get( 0 );\n* // returns <Complex64>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 10.0\n*/\nfunction cmap( N, x, strideX, offsetX, y, strideY, offsetY, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty.set( fcn( x.get( ix ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary function to a double-precision floating-point strided input array and assign results to a double-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/dmap\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var dmap = require( '@stdlib/strided/base/dmap' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* dmap( x.length, x, 1, y, 1, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var dmap = require( '@stdlib/strided/base/dmap' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* dmap.ndarray( x.length, x, 1, 0, y, 1, 0, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a double-precision floating-point strided input array and assigns results to a double-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {Function} fcn - unary function to apply\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* dmap( x.length, x, 1, y, 1, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction dmap( N, x, strideX, y, strideY, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = fcn( x[ ix ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a double-precision floating-point strided input array and assigns results to a double-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Function} fcn - unary function to apply\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* dmap( x.length, x, 1, 0, y, 1, 0, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction dmap( N, x, strideX, offsetX, y, strideY, offsetY, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = fcn( x[ ix ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary function to double-precision floating-point strided input arrays and assign results to a double-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/dmap2\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n* var dmap2 = require( '@stdlib/strided/base/dmap2' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* dmap2( x.length, x, 1, y, 1, z, 1, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n* var dmap2 = require( '@stdlib/strided/base/dmap2' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* dmap2.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to double-precision floating-point strided input arrays and assigns results to a double-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {Float64Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply\n* @returns {Float64Array} `z`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* dmap2( x.length, x, 1, y, 1, z, 1, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction dmap2( N, x, strideX, y, strideY, z, strideZ, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( strideZ < 0 ) {\n\t\tiz = (1-N) * strideZ;\n\t} else {\n\t\tiz = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to double-precision floating-point strided input arrays and assigns results to a double-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Float64Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply\n* @returns {Float64Array} `z`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* dmap2( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction dmap2( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn ) { // eslint-disable-line max-len, max-params\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tiz = offsetZ;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary function to a double-precision floating-point strided input array according to a strided mask array and assign results to a double-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/dmskmap\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var dmskmap = require( '@stdlib/strided/base/dmskmap' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float64Array( x.length );\n*\n* dmskmap( x.length, x, 1, m, 1, y, 1, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var dmskmap = require( '@stdlib/strided/base/dmskmap' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float64Array( x.length );\n*\n* dmskmap.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a double-precision floating-point strided input array according to a strided mask array and assigns results to a double-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {Function} fcn - unary function to apply\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float64Array( x.length );\n*\n* dmskmap( x.length, x, 1, m, 1, y, 1, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*/\nfunction dmskmap( N, x, strideX, mask, strideMask, y, strideY, fcn ) {\n\tvar ix;\n\tvar im;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\ty[ iy ] = fcn( x[ ix ] );\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmskmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a double-precision floating-point strided input array according to a strided mask array and assigns results to a double-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - starting `mask` index\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Function} fcn - unary function to apply\n* @returns {Float64Array} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float64Array( x.length );\n*\n* dmskmap( x.length, x, 1, 0, m, 1, 0, y, 1, 0, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*/\nfunction dmskmap( N, x, strideX, offsetX, mask, strideMask, offsetMask, y, strideY, offsetY, fcn ) { // eslint-disable-line max-len, max-params\n\tvar ix;\n\tvar im;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\ty[ iy ] = fcn( x[ ix ] );\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmskmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary function to double-precision floating-point strided input arrays according to a strided mask array and assign results to a double-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/dmskmap2\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var add = require( '@stdlib/math/base/ops/add' );\n* var dmskmap2 = require( '@stdlib/strided/base/dmskmap2' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float64Array( x.length );\n*\n* dmskmap2( x.length, x, 1, y, 1, m, 1, z, 1, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var add = require( '@stdlib/math/base/ops/add' );\n* var dmskmap2 = require( '@stdlib/strided/base/dmskmap2' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float64Array( x.length );\n*\n* dmskmap2.ndarray( x.length, x, 1, 0, y, 1, 0, m, 1, 0, z, 1, 0, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to double-precision floating-point strided input arrays and assigns results to a double-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {Float64Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply\n* @returns {Float64Array} `z`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float64Array( x.length );\n*\n* dmskmap2( x.length, x, 1, y, 1, m, 1, z, 1, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*/\nfunction dmskmap2( N, x, strideX, y, strideY, mask, strideMask, z, strideZ, fcn ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar im;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( strideZ < 0 ) {\n\t\tiz = (1-N) * strideZ;\n\t} else {\n\t\tiz = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t\tim += strideMask;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmskmap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to double-precision floating-point strided input arrays according to a strided mask array and assigns results to a double-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - starting `mask` index\n* @param {Float64Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply\n* @returns {Float64Array} `z`\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float64Array( x.length );\n*\n* dmskmap2( x.length, x, 1, 0, y, 1, 0, m, 1, 0, z, 1, 0, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*/\nfunction dmskmap2( N, x, strideX, offsetX, y, strideY, offsetY, mask, strideMask, offsetMask, z, strideZ, offsetZ, fcn ) { // eslint-disable-line max-len, max-params\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar im;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tiz = offsetZ;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t\tim += strideMask;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmskmap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary function to each element retrieved from a strided input array according to a callback function and assign results to a strided output array.\n*\n* @module @stdlib/strided/base/map-by\n*\n* @example\n* var abs = require( '@stdlib/math/base/special/abs' );\n* var mapBy = require( '@stdlib/strided/base/map-by' );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy( x.length, x, 1, y, 1, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*\n* @example\n* var abs = require( '@stdlib/math/base/special/abs' );\n* var mapBy = require( '@stdlib/strided/base/map-by' );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy.ndarray( x.length, x, 1, 0, y, 1, 0, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - destination array/collection\n* @param {integer} strideY - `y` stride length\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `y`\n*\n* @example\n* var abs = require( '@stdlib/math/base/special/abs' );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy( x.length, x, 1, y, 1, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction mapBy( N, x, strideX, y, strideY, fcn, clbk, thisArg ) {\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = clbk.call( thisArg, x[ ix ], i, ix, iy, x, y );\n\t\tif ( v !== void 0 ) {\n\t\t\ty[ iy ] = fcn( v );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - destination array/collection\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `y`\n*\n* @example\n* var abs = require( '@stdlib/math/base/special/abs' );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy( x.length, x, 1, 0, y, 1, 0, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction mapBy( N, x, strideX, offsetX, y, strideY, offsetY, fcn, clbk, thisArg ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = clbk.call( thisArg, x[ ix ], i, ix, iy, x, y );\n\t\tif ( v !== void 0 ) {\n\t\t\ty[ iy ] = fcn( v );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary function to each pair of elements retrieved from strided input arrays according to a callback function and assign results to a strided output array.\n*\n* @module @stdlib/strided/base/map-by2\n*\n* @example\n* var add = require( '@stdlib/math/base/ops/add' );\n* var mapBy2 = require( '@stdlib/strided/base/map-by2' );\n*\n* function accessor( vx, vy ) {\n*     return [ vx*2.0, vy*2.0 ];\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*\n* @example\n* var add = require( '@stdlib/math/base/ops/add' );\n* var mapBy2 = require( '@stdlib/strided/base/map-by2' );\n*\n* function accessor( vx, vy ) {\n*     return [ vx*2.0, vy*2.0 ];\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* function accessor( vx, vy ) {\n*     return [ vx*2.0, vy*2.0 ];\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, y, 1, z, 1, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, y, strideY, z, strideZ, fcn, clbk, thisArg ) {\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar v;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( strideZ < 0 ) {\n\t\tiz = (1-N) * strideZ;\n\t} else {\n\t\tiz = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = clbk.call( thisArg, x[ ix ], y[ iy ], i, ix, iy, iz, x, y, z );\n\t\tif ( v !== void 0 ) {\n\t\t\tz[ iz ] = fcn( v[ 0 ], v[ 1 ] );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Collection} y - input array/collection\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Collection} z - destination array/collection\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply to callback return values\n* @param {Callback} clbk - callback function which returns an array-like object containing two values\n* @param {*} [thisArg] - callback execution context\n* @returns {Collection} `z`\n*\n* @example\n* var add = require( '@stdlib/math/base/ops/add' );\n*\n* function accessor( vx, vy ) {\n*     return [ vx*2.0, vy*2.0 ];\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var z = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* mapBy2( x.length, x, 1, 0, y, 1, 0, z, 1, 0, add, accessor );\n*\n* console.log( z );\n* // => [ 4.0, 0.0, 12.0, 0.0, 20.0 ]\n*/\nfunction mapBy2( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn, clbk, thisArg ) { // eslint-disable-line max-len, max-params\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tiz = offsetZ;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = clbk.call( thisArg, x[ ix ], y[ iy ], i, ix, iy, iz, x, y, z );\n\t\tif ( v !== void 0 ) {\n\t\t\tz[ iz ] = fcn( v[ 0 ], v[ 1 ] );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mapBy2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the maximum accessible index based on a set of provided strided array parameters.\n*\n* @module @stdlib/strided/base/max-view-buffer-index\n*\n* @example\n* var maxViewBufferIndex = require( '@stdlib/strided/base/max-view-buffer-index' );\n*\n* var idx = maxViewBufferIndex( 3, 2, 10 );\n* // returns 14\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the maximum accessible index based on a set of provided strided array parameters.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NonNegativeInteger} index\n*\n* @example\n* var idx = maxViewBufferIndex( 3, 2, 10 );\n* // returns 14\n*/\nfunction maxViewBufferIndex( N, stride, offset ) {\n\tif ( N > 0 && stride > 0 ) {\n\t\toffset += (N-1) * stride;\n\t}\n\treturn offset;\n}\n\n\n// EXPORTS //\n\nmodule.exports = maxViewBufferIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define non-enumerable read-only properties which expose strided array function meta data.\n*\n* @module @stdlib/strided/base/meta-data-props\n*\n* @example\n* var setProps = require( '@stdlib/strided/base/meta-data-props' );\n*\n* // Define strided array function meta data:\n* var meta = {\n*     'nargs': 7,\n*     'nin': 1,\n*     'nout': 1\n* };\n*\n* // Define the list of strided array data types:\n* var dtypes = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n*\n* // Define an object/function on which to set the properties:\n* var obj = {};\n*\n* // Set the properties:\n* setProps( meta, dtypes, obj, false );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar dtypes2signatures = require( '@stdlib/ndarray/base/dtypes2signatures' );\n\n\n// MAIN //\n\n/**\n* Defines non-enumerable read-only properties which expose strided array function meta data.\n*\n* @param {Object} meta - function meta data\n* @param {NonNegativeInteger} meta.nargs - total number of arguments (excluding offsets)\n* @param {NonNegativeInteger} meta.nin - total number of input arrays\n* @param {NonNegativeInteger} meta.nout - total number of output arrays\n* @param {ArrayLikeObject} dtypes - list of strided array data types\n* @param {(Function|Object)} obj - object on which to define properties\n* @param {boolean} bool - boolean indicating whether the provided object should describe an \"ndarray\" function interface\n* @returns {(Function|Object)} object on which properties were defined\n*\n* @example\n* // Define strided array function meta data:\n* var meta = {\n*     'nargs': 7,\n*     'nin': 1,\n*     'nout': 1\n* };\n*\n* // Define the list of strided array data types:\n* var dtypes = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n*\n* // Define an object on which to set the properties:\n* var obj = {};\n*\n* // Set the properties:\n* setProps( meta, dtypes, obj, false );\n*\n* @example\n* // Define strided array function meta data:\n* var meta = {\n*     'nargs': 7,\n*     'nin': 1,\n*     'nout': 1\n* };\n*\n* // Define the list of strided array data types:\n* var dtypes = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n*\n* // Define a function on which to set the properties:\n* function abs( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Implementation...\n* }\n*\n* // Set the properties:\n* setProps( meta, dtypes, abs, false );\n*/\nfunction setProps( meta, dtypes, obj, bool ) {\n\t// Define the number of arguments:\n\tif ( bool ) {\n\t\tsetReadOnly( obj, 'nargs', meta.nargs+meta.nin+meta.nout ); // Note: accounts for one offset argument per input/output strided array\n\t} else {\n\t\tsetReadOnly( obj, 'nargs', meta.nargs );\n\t}\n\t// Define the number of input strided arrays:\n\tsetReadOnly( obj, 'nin', meta.nin );\n\n\t// Define the number of output strided arrays:\n\tsetReadOnly( obj, 'nout', meta.nout );\n\n\t// Define a read-only accessor for listing a function's supported array data types:\n\tsetReadOnlyAccessor( obj, 'types', types );\n\n\treturn obj;\n\n\t/**\n\t* Returns a list of strided array interface array type signatures.\n\t*\n\t* @private\n\t* @returns {StringArray} list of signatures\n\t*/\n\tfunction types() {\n\t\treturn dtypes2signatures( dtypes, meta.nin, meta.nout );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = setProps;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary callback to elements in a strided input array according to elements in a strided mask array and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided/base/mskunary\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var mskunary = require( '@stdlib/strided/base/mskunary' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* mskunary( [ x, m, y ], shape, strides, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var mskunary = require( '@stdlib/strided/base/mskunary' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* mskunary.ndarray( [ x, m, y ], shape, strides, offsets, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar mskunary = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( mskunary, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = mskunary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array according to elements in a strided mask array and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array, a mask array, and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the strided arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* mskunary( [ x, m, y ], shape, strides, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*/\nfunction mskunary( arrays, shape, strides, fcn ) {\n\tvar sx;\n\tvar sm;\n\tvar sy;\n\tvar ix;\n\tvar im;\n\tvar iy;\n\tvar x;\n\tvar m;\n\tvar y;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tsm = strides[ 1 ];\n\tsy = strides[ 2 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( sm < 0 ) {\n\t\tim = (1-N) * sm;\n\t} else {\n\t\tim = 0;\n\t}\n\tif ( sy < 0 ) {\n\t\tiy = (1-N) * sy;\n\t} else {\n\t\tiy = 0;\n\t}\n\tx = arrays[ 0 ];\n\tm = arrays[ 1 ];\n\ty = arrays[ 2 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( m[ im ] === 0 ) {\n\t\t\ty[ iy ] = fcn( x[ ix ] );\n\t\t}\n\t\tix += sx;\n\t\tim += sm;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = mskunary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a strided input array according to elements in a strided mask array and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array, a mask array, and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the strided arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the strided arrays\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* mskunary( [ x, m, y ], shape, strides, offsets, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*/\nfunction mskunary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar sm;\n\tvar sy;\n\tvar ix;\n\tvar im;\n\tvar iy;\n\tvar x;\n\tvar m;\n\tvar y;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tim = offsets[ 1 ];\n\tiy = offsets[ 2 ];\n\tsx = strides[ 0 ];\n\tsm = strides[ 1 ];\n\tsy = strides[ 2 ];\n\tx = arrays[ 0 ];\n\tm = arrays[ 1 ];\n\ty = arrays[ 2 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( m[ im ] === 0 ) {\n\t\t\ty[ iy ] = fcn( x[ ix ] );\n\t\t}\n\t\tix += sx;\n\t\tim += sm;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = mskunary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a nullary callback and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided/base/nullary\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var nullary = require( '@stdlib/strided/base/nullary' );\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n*\n* nullary( [ x ], shape, strides, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var nullary = require( '@stdlib/strided/base/nullary' );\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n* var offsets = [ 0 ];\n*\n* nullary.ndarray( [ x ], shape, strides, offsets, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar nullary = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( nullary, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride length for the output array\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n*\n* nullary( [ x ], shape, strides, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*/\nfunction nullary( arrays, shape, strides, fcn ) {\n\tvar sx;\n\tvar ix;\n\tvar x;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tx = arrays[ 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = fcn();\n\t\tix += sx;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride length for the output array\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting index (i.e., index offset) for the output array\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n* var offsets = [ 0 ];\n*\n* nullary( [ x ], shape, strides, offsets, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*/\nfunction nullary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar ix;\n\tvar x;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tsx = strides[ 0 ];\n\tx = arrays[ 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = fcn();\n\t\tix += sx;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a quaternary callback to strided input array elements and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided/base/quaternary\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var quaternary = require( '@stdlib/strided/base/quaternary' );\n*\n* function add( x, y, z, w ) {\n*     return x + y + z + w;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1 ];\n*\n* quaternary( [ x, y, z, w, u ], shape, strides, add );\n*\n* console.log( u );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var quaternary = require( '@stdlib/strided/base/quaternary' );\n*\n* function add( x, y, z, w ) {\n*     return x + y + z + w;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1 ];\n* var offsets = [ 0, 0, 0, 0, 0 ];\n*\n* quaternary.ndarray( [ x, y, z, w, u ], shape, strides, offsets, add );\n*\n* console.log( u );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar quaternary = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( quaternary, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = quaternary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a quaternary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing four input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - quaternary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function add( x, y, z, w ) {\n*     return x + y + z + w;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1 ];\n*\n* quaternary( [ x, y, z, w, u ], shape, strides, add );\n*\n* console.log( u );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\nfunction quaternary( arrays, shape, strides, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar sw;\n\tvar su;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar iw;\n\tvar iu;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar w;\n\tvar u;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tsw = strides[ 3 ];\n\tsu = strides[ 4 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( sy < 0 ) {\n\t\tiy = (1-N) * sy;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( sz < 0 ) {\n\t\tiz = (1-N) * sz;\n\t} else {\n\t\tiz = 0;\n\t}\n\tif ( sw < 0 ) {\n\t\tiw = (1-N) * sw;\n\t} else {\n\t\tiw = 0;\n\t}\n\tif ( su < 0 ) {\n\t\tiu = (1-N) * su;\n\t} else {\n\t\tiu = 0;\n\t}\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tw = arrays[ 3 ];\n\tu = arrays[ 4 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tu[ iu ] = fcn( x[ ix ], y[ iy ], z[ iz ], w[ iw ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t\tiw += sw;\n\t\tiu += su;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = quaternary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a quaternary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing four input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - quaternary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function add( x, y, z, w ) {\n*     return x + y + z + w;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1 ];\n* var offsets = [ 0, 0, 0, 0, 0 ];\n*\n* quaternary( [ x, y, z, w, u ], shape, strides, offsets, add );\n*\n* console.log( u );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\nfunction quaternary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar sw;\n\tvar su;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar iw;\n\tvar iu;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar w;\n\tvar u;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tiz = offsets[ 2 ];\n\tiw = offsets[ 3 ];\n\tiu = offsets[ 4 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tsw = strides[ 3 ];\n\tsu = strides[ 4 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tw = arrays[ 3 ];\n\tu = arrays[ 4 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tu[ iu ] = fcn( x[ ix ], y[ iy ], z[ iz ], w[ iw ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t\tiw += sw;\n\t\tiu += su;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = quaternary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a quinary callback to strided input array elements and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided/base/quinary\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var quinary = require( '@stdlib/strided/base/quinary' );\n*\n* function add( x, y, z, w, u ) {\n*     return x + y + z + w + u;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var v = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1, 1 ];\n*\n* quinary( [ x, y, z, w, u, v ], shape, strides, add );\n*\n* console.log( v );\n* // => <Float64Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var quinary = require( '@stdlib/strided/base/quinary' );\n*\n* function add( x, y, z, w, u ) {\n*     return x + y + z + w + u;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var v = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1, 1 ];\n* var offsets = [ 0, 0, 0, 0, 0, 0 ];\n*\n* quinary.ndarray( [ x, y, z, w, u, v ], shape, strides, offsets, add );\n*\n* console.log( v );\n* // => <Float64Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar quinary = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( quinary, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = quinary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a quinary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing five input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - quinary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function add( x, y, z, w, u ) {\n*     return x + y + z + w + u;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var v = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1, 1 ];\n*\n* quinary( [ x, y, z, w, u, v ], shape, strides, add );\n*\n* console.log( v );\n* // => <Float64Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\nfunction quinary( arrays, shape, strides, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar sw;\n\tvar su;\n\tvar sv;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar iw;\n\tvar iu;\n\tvar iv;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar w;\n\tvar u;\n\tvar v;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tsw = strides[ 3 ];\n\tsu = strides[ 4 ];\n\tsv = strides[ 5 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( sy < 0 ) {\n\t\tiy = (1-N) * sy;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( sz < 0 ) {\n\t\tiz = (1-N) * sz;\n\t} else {\n\t\tiz = 0;\n\t}\n\tif ( sw < 0 ) {\n\t\tiw = (1-N) * sw;\n\t} else {\n\t\tiw = 0;\n\t}\n\tif ( su < 0 ) {\n\t\tiu = (1-N) * su;\n\t} else {\n\t\tiu = 0;\n\t}\n\tif ( sv < 0 ) {\n\t\tiv = (1-N) * sv;\n\t} else {\n\t\tiv = 0;\n\t}\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tw = arrays[ 3 ];\n\tu = arrays[ 4 ];\n\tv = arrays[ 5 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv[ iv ] = fcn( x[ ix ], y[ iy ], z[ iz ], w[ iw ], u[ iu ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t\tiw += sw;\n\t\tiu += su;\n\t\tiv += sv;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = quinary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a quinary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing five input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - quinary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function add( x, y, z, w, u ) {\n*     return x + y + z + w + u;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var u = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var v = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1, 1, 1 ];\n* var offsets = [ 0, 0, 0, 0, 0, 0 ];\n*\n* quinary( [ x, y, z, w, u, v ], shape, strides, offsets, add );\n*\n* console.log( v );\n* // => <Float64Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\nfunction quinary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar sw;\n\tvar su;\n\tvar sv;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar iw;\n\tvar iu;\n\tvar iv;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar w;\n\tvar u;\n\tvar v;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tiz = offsets[ 2 ];\n\tiw = offsets[ 3 ];\n\tiu = offsets[ 4 ];\n\tiv = offsets[ 5 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tsw = strides[ 3 ];\n\tsu = strides[ 4 ];\n\tsv = strides[ 5 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tw = arrays[ 3 ];\n\tu = arrays[ 4 ];\n\tv = arrays[ 5 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv[ iv ] = fcn( x[ ix ], y[ iy ], z[ iz ], w[ iw ], u[ iu ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t\tiw += sw;\n\t\tiu += su;\n\t\tiv += sv;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = quinary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary function to a single-precision floating-point strided input array and assign results to a single-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/smap\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var smap = require( '@stdlib/strided/base/smap' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( x.length );\n*\n* smap( x.length, x, 1, y, 1, scale );\n*\n* console.log( y );\n* // => <Float32Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var smap = require( '@stdlib/strided/base/smap' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( x.length );\n*\n* smap.ndarray( x.length, x, 1, 0, y, 1, 0, scale );\n*\n* console.log( y );\n* // => <Float32Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a single-precision floating-point strided input array and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {Function} fcn - unary function to apply\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( x.length );\n*\n* smap( x.length, x, 1, y, 1, scale );\n*\n* console.log( y );\n* // => <Float32Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction smap( N, x, strideX, y, strideY, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = fcn( x[ ix ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a single-precision floating-point strided input array and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Function} fcn - unary function to apply\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( x.length );\n*\n* smap( x.length, x, 1, 0, y, 1, 0, scale );\n*\n* console.log( y );\n* // => <Float32Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\nfunction smap( N, x, strideX, offsetX, y, strideY, offsetY, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] = fcn( x[ ix ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary function to single-precision floating-point strided input arrays and assign results to a single-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/smap2\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n* var smap2 = require( '@stdlib/strided/base/smap2' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float32Array( x.length );\n*\n* smap2( x.length, x, 1, y, 1, z, 1, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n* var smap2 = require( '@stdlib/strided/base/smap2' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float32Array( x.length );\n*\n* smap2.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to single-precision floating-point strided input arrays and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {Float32Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply\n* @returns {Float32Array} `z`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float32Array( x.length );\n*\n* smap2( x.length, x, 1, y, 1, z, 1, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction smap2( N, x, strideX, y, strideY, z, strideZ, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( strideZ < 0 ) {\n\t\tiz = (1-N) * strideZ;\n\t} else {\n\t\tiz = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to single-precision floating-point strided input arrays and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Float32Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply\n* @returns {Float32Array} `z`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float32Array( x.length );\n*\n* smap2( x.length, x, 1, 0, y, 1, 0, z, 1, 0, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction smap2( N, x, strideX, offsetX, y, strideY, offsetY, z, strideZ, offsetZ, fcn ) { // eslint-disable-line max-len, max-params\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tiz = offsetZ;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary function to a single-precision floating-point strided input array according to a strided mask array and assign results to a single-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/smskmap\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var smskmap = require( '@stdlib/strided/base/smskmap' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float32Array( x.length );\n*\n* smskmap( x.length, x, 1, m, 1, y, 1, scale );\n*\n* console.log( y );\n* // => <Float32Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var smskmap = require( '@stdlib/strided/base/smskmap' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float32Array( x.length );\n*\n* smskmap.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0, scale );\n*\n* console.log( y );\n* // => <Float32Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a single-precision floating-point strided input array according to a strided mask array and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {Function} fcn - unary function to apply\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float32Array( x.length );\n*\n* smskmap( x.length, x, 1, m, 1, y, 1, scale );\n*\n* console.log( y );\n* // => <Float32Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*/\nfunction smskmap( N, x, strideX, mask, strideMask, y, strideY, fcn ) {\n\tvar ix;\n\tvar im;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\ty[ iy ] = fcn( x[ ix ] );\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smskmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a single-precision floating-point strided input array according to a strided mask array and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - starting `mask` index\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Function} fcn - unary function to apply\n* @returns {Float32Array} `y`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var y = new Float32Array( x.length );\n*\n* smskmap( x.length, x, 1, 0, m, 1, 0, y, 1, 0, scale );\n*\n* console.log( y );\n* // => <Float32Array>[ 10.0, 20.0, 0.0, 40.0, 50.0 ]\n*/\nfunction smskmap( N, x, strideX, offsetX, mask, strideMask, offsetMask, y, strideY, offsetY, fcn ) { // eslint-disable-line max-len, max-params\n\tvar ix;\n\tvar im;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\ty[ iy ] = fcn( x[ ix ] );\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smskmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary function to single-precision floating-point strided input arrays according to a strided mask array and assign results to a single-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/smskmap2\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n* var smskmap2 = require( '@stdlib/strided/base/smskmap2' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float32Array( x.length );\n*\n* smskmap2( x.length, x, 1, y, 1, m, 1, z, 1, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n* var smskmap2 = require( '@stdlib/strided/base/smskmap2' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float32Array( x.length );\n*\n* smskmap2.ndarray( x.length, x, 1, 0, y, 1, 0, m, 1, 0, z, 1, 0, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to single-precision floating-point strided input arrays and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {Float32Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {Function} fcn - binary function to apply\n* @returns {Float32Array} `z`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float32Array( x.length );\n*\n* smskmap2( x.length, x, 1, y, 1, m, 1, z, 1, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*/\nfunction smskmap2( N, x, strideX, y, strideY, mask, strideMask, z, strideZ, fcn ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar im;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( strideZ < 0 ) {\n\t\tiz = (1-N) * strideZ;\n\t} else {\n\t\tiz = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t\tim += strideMask;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smskmap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary function to single-precision floating-point strided input arrays according to a strided mask array and assigns results to a single-precision floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - starting `mask` index\n* @param {Float32Array} z - destination array\n* @param {integer} strideZ - `z` stride length\n* @param {NonNegativeInteger} offsetZ - starting `z` index\n* @param {Function} fcn - binary function to apply\n* @returns {Float32Array} `z`\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var m = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n* var z = new Float32Array( x.length );\n*\n* smskmap2( x.length, x, 1, 0, y, 1, 0, m, 1, 0, z, 1, 0, addf );\n*\n* console.log( z );\n* // => <Float32Array>[ 2.0, 4.0, 0.0, 8.0, 10.0 ]\n*/\nfunction smskmap2( N, x, strideX, offsetX, y, strideY, offsetY, mask, strideMask, offsetMask, z, strideZ, offsetZ, fcn ) { // eslint-disable-line max-len, max-params\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar im;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn z;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tiz = offsetZ;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\t}\n\t\tix += strideX;\n\t\tiy += strideY;\n\t\tiz += strideZ;\n\t\tim += strideMask;\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smskmap2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a ternary callback to strided input array elements and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided/base/ternary\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ternary = require( '@stdlib/strided/base/ternary' );\n*\n* function add( x, y, z ) {\n*     return x + y + z;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1 ];\n*\n* ternary( [ x, y, z, w ], shape, strides, add );\n*\n* console.log( w );\n* // => <Float64Array>[ 3.0, 6.0, 9.0, 12.0, 15.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ternary = require( '@stdlib/strided/base/ternary' );\n*\n* function add( x, y, z ) {\n*     return x + y + z;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1 ];\n* var offsets = [ 0, 0, 0, 0 ];\n*\n* ternary.ndarray( [ x, y, z, w ], shape, strides, offsets, add );\n*\n* console.log( w );\n* // => <Float64Array>[ 3.0, 6.0, 9.0, 12.0, 15.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar ternary = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( ternary, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = ternary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a ternary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing three input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - ternary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function add( x, y, z ) {\n*     return x + y + z;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1 ];\n*\n* ternary( [ x, y, z, w ], shape, strides, add );\n*\n* console.log( w );\n* // => <Float64Array>[ 3.0, 6.0, 9.0, 12.0, 15.0 ]\n*/\nfunction ternary( arrays, shape, strides, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar sw;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar iw;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar w;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tsw = strides[ 3 ];\n\tif ( sx < 0 ) {\n\t\tix = (1-N) * sx;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( sy < 0 ) {\n\t\tiy = (1-N) * sy;\n\t} else {\n\t\tiy = 0;\n\t}\n\tif ( sz < 0 ) {\n\t\tiz = (1-N) * sz;\n\t} else {\n\t\tiz = 0;\n\t}\n\tif ( sw < 0 ) {\n\t\tiw = (1-N) * sw;\n\t} else {\n\t\tiw = 0;\n\t}\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tw = arrays[ 3 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tw[ iw ] = fcn( x[ ix ], y[ iy ], z[ iz ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t\tiw += sw;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = ternary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a ternary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing three input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - ternary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* function add( x, y, z ) {\n*     return x + y + z;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var w = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1, 1 ];\n* var offsets = [ 0, 0, 0, 0 ];\n*\n* ternary( [ x, y, z, w ], shape, strides, offsets, add );\n*\n* console.log( w );\n* // => <Float64Array>[ 3.0, 6.0, 9.0, 12.0, 15.0 ]\n*/\nfunction ternary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar sw;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar iw;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar w;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tiz = offsets[ 2 ];\n\tiw = offsets[ 3 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tsw = strides[ 3 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tw = arrays[ 3 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tw[ iw ] = fcn( x[ ix ], y[ iy ], z[ iz ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t\tiw += sw;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = ternary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary callback to elements in a strided input array and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided/base/unary\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var unary = require( '@stdlib/strided/base/unary' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unary( [ x, y ], shape, strides, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var unary = require( '@stdlib/strided/base/unary' );\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unary.ndarray( [ x, y ], shape, strides, offsets, scale );\n*\n* console.log( y );\n* // => <Float64Array>[ 10.0, 20.0, 30.0, 40.0, 50.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar unary = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( unary, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Dispatch to a native add-on applying a unary function to an input strided array.\n*\n* @module @stdlib/strided/base/unary-addon-dispatch\n*\n* @example\n* var dispatch = require( '@stdlib/strided/base/unary-addon-dispatch' );\n*\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary function to a double-precision floating-point strided input array and assign results to a double-precision floating-point strided output array.\n*\n* @module @stdlib/strided/base/zmap\n*\n* @example\n* var Complex128Array = require( '@stdlib/array/complex128' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n* var Complex128 = require( '@stdlib/complex/float64' );\n* var zmap = require( '@stdlib/strided/base/zmap' );\n*\n* function scale( x ) {\n*     var re = real( x );\n*     var im = imag( x );\n*     return new Complex128( re*10.0, im*10.0 );\n* }\n*\n* var x = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0 ] );\n* var y = new Complex128Array( x.length );\n*\n* zmap( x.length, x, 1, y, 1, scale );\n*\n* var v = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 10.0\n*\n* @example\n* var Complex128Array = require( '@stdlib/array/complex128' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n* var Complex128 = require( '@stdlib/complex/float64' );\n* var zmap = require( '@stdlib/strided/base/zmap' );\n*\n* function scale( x ) {\n*     var re = real( x );\n*     var im = imag( x );\n*     return new Complex128( re*10.0, im*10.0 );\n* }\n*\n* var x = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0 ] );\n* var y = new Complex128Array( x.length );\n*\n* zmap.ndarray( x.length, x, 1, 0, y, 1, 0, scale );\n*\n* var v = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 10.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to a double-precision complex floating-point strided input array and assigns results to a double-precision complex floating-point strided output array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex128Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {Function} fcn - unary function to apply\n* @returns {Complex128Array} `y`\n*\n* @example\n* var Complex128Array = require( '@stdlib/array/complex128' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n* var Complex128 = require( '@stdlib/complex/float64' );\n*\n* function scale( x ) {\n*     var re = real( x );\n*     var im = imag( x );\n*     return new Complex128( re*10.0, im*10.0 );\n* }\n*\n* var x = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0 ] );\n* var y = new Complex128Array( x.length );\n*\n* zmap( x.length, x, 1, y, 1, scale );\n*\n* var v = y.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 10.0\n*/\nfunction zmap( N, x, strideX, y, strideY, fcn ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty.set( fcn( x.get( ix ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zmap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the first row index at which a given one-dimensional array of types can be found in a two-dimensional reference array of types (or `-1` if not found).\n*\n* ## Notes\n*\n* -   The intended use case for this function is for type dispatch (i.e., given a set of array data types, find a matching interface according the interface's accepted array data types).\n* -   The function assumes that `x` is stored in row-major order.\n* -   The function assumes that the number of indexed elements in `y` equals the number of columns in `x`.\n* -   The function returns a row index. To convert to a linear index, multiply `strideX1` by the return value.\n*\n* @private\n* @param {NonNegativeInteger} N - number of rows in `x` (size of first dimension)\n* @param {NonNegativeInteger} M - number of columns in `x` (size of second dimension)\n* @param {ArrayLikeObject} x - input two-dimensional reference array\n* @param {integer} strideX1 - `x` stride length along first dimension\n* @param {integer} strideX2 - `x` stride length along second dimension\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {ArrayLikeObject} y - search array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {integer} row index (if found) and `-1` otherwise\n*\n* @example\n* // Define a reference array to search:\n* var types = [\n*     'float64', 'float64', 'float64',\n*     'float32', 'float32', 'float32',\n*     'uint32', 'uint32', 'float64',\n*     'int32', 'int32', 'float64',\n*     'uint16', 'uint16', 'float64',\n*     'int16', 'int16', 'float64',\n*     'uint8', 'uint8', 'float64',\n*     'int8', 'int8', 'float64'\n* ];\n*\n* // Define reference array dimensions:\n* var N = 8; // rows\n* var M = 3; // columns\n*\n* // Define a search array:\n* y1 = [\n*     'float32', 'float32', 'float32',\n* ];\n*\n* // Find the list of types:\n* var r1 = indexOfTypes( N, M, types, M, 1, 0, y1, 1, 0 );\n* // returns 1\n*\n// Define a search array:\n* y2 = [\n*     'float32', 'float32', 'float64',\n* ];\n*\n* // Find the list of types:\n* var r2 = indexOfTypes( N, M, types, M, 1, 0, y2, 1, 0 );\n* // returns -1\n*/\nfunction indexOfTypes( N, M, x, strideX1, strideX2, offsetX, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\t// Search for the first row which matches `y`...\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tiy = offsetY;\n\t\tfor ( j = 0; j < M; j++ ) {\n\t\t\tif ( x[ ix+(j*strideX2) ] !== y[ iy ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tiy += strideY;\n\t\t}\n\t\t// If we successfully iterated over all columns, then that means we've found a match...\n\t\tif ( j === M ) {\n\t\t\treturn i;\n\t\t}\n\t\tix += strideX1;\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nmodule.exports = indexOfTypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isFunctionArray = require( '@stdlib/assert/is-function-array' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar format = require( '@stdlib/string/format' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar indexOfTypes = require( './index_of_types.js' );\n\n\n// MAIN //\n\n/**\n* Returns a strided array function interface which performs multiple dispatch.\n*\n* @param {(FunctionArray|Function)} fcns - list of strided array functions\n* @param {Collection} types - one-dimensional list of strided array argument data types\n* @param {(Collection|null)} data - strided array function data (e.g., callbacks)\n* @param {PositiveInteger} nargs - total number of strided array function interface arguments (including data types, strides, and offsets)\n* @param {NonNegativeInteger} nin - number of input strided arrays\n* @param {NonNegativeInteger} nout - number of output strided arrays\n* @throws {TypeError} first argument must be either a function or an array of functions\n* @throws {TypeError} second argument must be an an array-like object\n* @throws {TypeError} third argument must be an array-like object or `null`\n* @throws {Error} third and first arguments must have the same number of elements\n* @throws {TypeError} fourth argument must be a positive integer\n* @throws {TypeError} fifth argument must be a nonnegative integer\n* @throws {TypeError} sixth argument must be a nonnegative integer\n* @throws {Error} fourth argument must be compatible with the specified number of input and output arrays\n* @throws {Error} number of types must match the number of functions times the total number of array arguments for each function\n* @throws {Error} interface must accept at least one strided input and/or output array\n* @returns {Function} strided array function interface\n*\n* @example\n* var unary = require( '@stdlib/strided/base/unary' );\n* var abs = require( '@stdlib/math/base/special/abs' );\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var types = [\n*     'float64', 'float64'\n* ];\n*\n* var data = [\n*     abs\n* ];\n*\n* var strided = dispatch( unary, types, data, 7, 1, 1 );\n*\n* // ...\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* strided( x.length, 'float64', x, 1, 'float64', y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dispatch( fcns, types, data, nargs, nin, nout ) {\n\tvar strideArgs;\n\tvar hasOffsets;\n\tvar narrays;\n\tvar nfcns;\n\tvar iout;\n\tvar fcn;\n\n\tif ( isFunction( fcns ) ) {\n\t\tfcn = fcns;\n\t} else if ( !isFunctionArray( fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a function or an array of functions. Value: `%s`.', fcns ) );\n\t}\n\tif ( !isCollection( types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', types ) );\n\t}\n\tif ( !isCollection( data ) && data !== null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object or null. Value: `%s`.', data ) );\n\t}\n\tif ( !isPositiveInteger( nargs ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a positive integer. Value: `%s`.', nargs ) );\n\t}\n\tif ( !isNonNegativeInteger( nin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%s`.', nin ) );\n\t}\n\tif ( !isNonNegativeInteger( nout ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Sixth argument must be a nonnegative integer. Value: `%s`.', nout ) );\n\t}\n\tnarrays = nin + nout;\n\tif ( narrays === 0 ) {\n\t\tthrow new Error( 'invalid arguments. Interface must accept at least one strided input and/or output array. Based on the provided arguments, `nin+nout` equals `0`.' );\n\t}\n\tif ( fcn ) {\n\t\tnfcns = types.length / narrays;\n\t\tif ( !isInteger( nfcns ) ) {\n\t\t\tthrow new Error( 'invalid argument. Unexpected number of types. A type must be specified for each strided input and output array for each provided strided array function.' );\n\t\t}\n\t} else {\n\t\tnfcns = fcns.length;\n\t\tif ( types.length !== nfcns*narrays ) {\n\t\t\tthrow new Error( 'invalid argument. Unexpected number of types. A type must be specified for each strided input and output array for each provided strided array function.' );\n\t\t}\n\t}\n\tif ( data && data.length !== nfcns ) {\n\t\tthrow new Error( 'invalid argument. The third argument must have the same number of elements as the first argument.' );\n\t}\n\t// Determine whether the strided array interface includes offsets:\n\tif ( (narrays*3)+1 === nargs ) {\n\t\thasOffsets = false;\n\t} else if ( (narrays*4)+1 === nargs ) {\n\t\thasOffsets = true;\n\t} else {\n\t\tthrow new Error( 'invalid argument. Fourth argument is incompatible with the number of strided input and output arrays.' );\n\t}\n\t// Determine the \"stride\" for accessing related arguments:\n\tif ( hasOffsets ) {\n\t\tstrideArgs = 4;\n\t} else {\n\t\tstrideArgs = 3;\n\t}\n\t// Compute the index of the first output strided array argument:\n\tiout = ( nin*strideArgs ) + 1;\n\n\treturn dispatcher;\n\n\t/**\n\t* Strided array function interface which performs multiple dispatch.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - data type for `x`\n\t* @param {Collection} x - strided array\n\t* @param {integer} strideX - index increment for `x`\n\t* @param {...(Collection|integer|NonNegativeInteger)} args - array arguments (data types, arrays, strides, and offsets)\n\t* @throws {Error} insufficient arguments\n\t* @throws {Error} too many arguments\n\t* @throws {TypeError} first argument must be an integer\n\t* @throws {TypeError} input array strides must be integers\n\t* @throws {TypeError} output array strides must be integers\n\t* @throws {TypeError} input array offsets must be nonnegative integers\n\t* @throws {TypeError} output array offsets must be nonnegative integers\n\t* @throws {TypeError} input array arguments must be array-like objects\n\t* @throws {TypeError} output array arguments must be array-like objects\n\t* @throws {RangeError} input array arguments must have sufficient elements based on the associated stride and the number of indexed elements\n\t* @throws {RangeError} output array arguments must have sufficient elements based on the associated stride and the number of indexed elements\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {(Collection|Array<Collection>|void)} destination array(s)\n\t*/\n\tfunction dispatcher() {\n\t\tvar strides;\n\t\tvar offsets;\n\t\tvar arrays;\n\t\tvar dtypes;\n\t\tvar shape;\n\t\tvar argc;\n\t\tvar idx;\n\t\tvar N;\n\t\tvar v;\n\t\tvar f;\n\t\tvar i;\n\t\tvar j;\n\n\t\targc = arguments.length;\n\t\tif ( argc !== nargs ) {\n\t\t\tif ( argc < nargs ) {\n\t\t\t\tthrow new Error( 'invalid invocation. Insufficient arguments.' );\n\t\t\t}\n\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t}\n\t\tN = arguments[ 0 ];\n\t\tif ( !isInteger( N ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', N ) );\n\t\t}\n\t\tshape = [ N ];\n\n\t\t// data types for both input and output strided arrays are every `strideArgs` arguments beginning from the second argument...\n\t\tdtypes = [];\n\t\tfor ( i = 1; i < nargs; i += strideArgs ) {\n\t\t\tdtypes.push( arguments[ i ] );\n\t\t}\n\n\t\t// Strides for both input and output strided arrays are every `strideArgs` arguments beginning from the fourth argument...\n\t\tstrides = [];\n\t\tfor ( i = 3; i < nargs; i += strideArgs ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( !isInteger( v ) ) {\n\t\t\t\tif ( i < iout ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Input array stride must be an integer. Value: `%s`.', v ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Output array stride must be an integer. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\tstrides.push( v );\n\t\t}\n\t\tif ( hasOffsets ) {\n\t\t\t// Offsets for both input and output strided arrays are every `strideArgs` arguments beginning from the fifth argument...\n\t\t\toffsets = [];\n\t\t\tfor ( i = 4; i < nargs; i += strideArgs ) {\n\t\t\t\tv = arguments[ i ];\n\t\t\t\tif ( !isNonNegativeInteger( v ) ) {\n\t\t\t\t\tif ( i < iout ) {\n\t\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Input array offset must be a nonnegative integer. Value: `%s`.', v ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Output array offset must be a nonnegative integer. Value: `%s`.', v ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toffsets.push( v );\n\t\t\t}\n\t\t}\n\t\t// Input and output strided arrays are every `strideArgs` arguments beginning from the third argument...\n\t\tarrays = [];\n\t\tfor ( i = 2; i < nargs; i += strideArgs ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( !isCollection( v ) ) {\n\t\t\t\tif ( i < iout ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Input array must be an array-like object. Value: `%s`.', v ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Output array must be an array-like object. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\tj = (i-2) / strideArgs;\n\t\t\tif ( hasOffsets ) {\n\t\t\t\tidx = offsets[ j ] + ( (N-1)*strides[j] );\n\t\t\t\tif ( N > 0 && (idx < 0 || idx >= v.length) ) {\n\t\t\t\t\tif ( i < iout ) {\n\t\t\t\t\t\tthrow new RangeError( 'invalid argument. Input array has insufficient elements based on the associated stride and the number of indexed elements.' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new RangeError( 'invalid argument. Output array has insufficient elements based on the associated stride and the number of indexed elements.' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( (N-1)*abs(strides[j]) >= v.length ) {\n\t\t\t\tif ( i < iout ) {\n\t\t\t\t\tthrow new RangeError( 'invalid argument. Input array has insufficient elements based on the associated stride and the number of indexed elements.' );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RangeError( 'invalid argument. Output array has insufficient elements based on the associated stride and the number of indexed elements.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tarrays.push( v );\n\t\t}\n\t\t// Resolve the strided array function satisfying the input array types:\n\t\tidx = indexOfTypes( nfcns, narrays, types, narrays, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\n\t\t// Check whether we were able to successfully resolve a strided array function:\n\t\tif ( idx < 0 ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\t// Retrieve the strided array function:\n\t\tif ( fcn ) {\n\t\t\tf = fcn;\n\t\t} else {\n\t\t\tf = fcns[ idx ];\n\t\t}\n\t\t// Evaluate the strided array function:\n\t\tif ( data ) {\n\t\t\tif ( hasOffsets ) {\n\t\t\t\tf( arrays, shape, strides, offsets, data[ idx ] );\n\t\t\t} else {\n\t\t\t\tf( arrays, shape, strides, data[ idx ] );\n\t\t\t}\n\t\t} else if ( hasOffsets ) {\n\t\t\tf( arrays, shape, strides, offsets );\n\t\t} else {\n\t\t\tf( arrays, shape, strides );\n\t\t}\n\t\tif ( nout === 1 ) {\n\t\t\treturn arrays[ narrays-1 ];\n\t\t}\n\t\tif ( nout === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\treturn arrays.slice( nin );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a strided array function interface which performs multiple dispatch.\n*\n* @module @stdlib/strided/dispatch\n*\n* @example\n* var dispatch = require( '@stdlib/strided/dispatch' );\n* var unary = require( '@stdlib/strided/base/unary' );\n* var abs = require( '@stdlib/math/base/special/abs' );\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var types = [\n*     'float64', 'float64'\n* ];\n*\n* var data = [\n*     abs\n* ];\n*\n* var strided = dispatch( unary, types, data, 7, 1, 1 );\n*\n* // ...\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* strided( x.length, 'float64', x, 1, 'float64', y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar dispatch = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n/*\n* The following modules are intentionally not exported: common, napi\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace strided\n*/\nvar strided = {};\n\n/**\n* @name base\n* @memberof strided\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/strided/base}\n*/\nimport base from './../base';\nsetReadOnly( strided, 'base', base );\n\n/**\n* @name dispatch\n* @memberof strided\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/dispatch}\n*/\nimport dispatch from './../dispatch';\nsetReadOnly( strided, 'dispatch', dispatch );\n\n/**\n* @name dtypes\n* @memberof strided\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/strided/dtypes}\n*/\nimport dtypes from './../dtypes';\nsetReadOnly( strided, 'dtypes', dtypes );\n\n\n// EXPORTS //\n\nexport default strided;\n"],"names":["getter_1","x","idx","getter_accessor","get","setter_1","value","setter_accessor","set","strided","binary_1","arrays","shape","strides","fcn","sx","sy","sz","ix","iy","iz","y","z","N","i","accessors","xget","yget","zset","getIndexed","require$$2","getAccessor","require$$3","setIndexed","require$$4","setAccessor","require$$5","main","binary_ndarray","offsets","accessors_ndarray","ndarray","DTYPES","slice","dt","ndtypes","require$$0","enum","setReadOnly","objectKeys","require$$1","dtypes","enumeration","bool","int8","uint8","uint8c","int16","uint16","int32","uint32","int64","uint64","float32","float64","complex64","complex128","binary","generic","notype","userdefined_type","assign","target","source","keys","k","length","lib","hash","duplicates","dtype","v","ENUM","enum2str","str2enum","t","Float32Array","offset","buffer","byteOffset","BYTES_PER_ELEMENT","Float64Array","isFunction","isTypedArrayLike","resolve","reinterpretComplex64","reinterpretComplex128","format","COMPLEX64","COMPLEX128","addon","fallback","TypeError","dtypeX","strideX","dtypeY","strideY","dtypeZ","strideZ","viewX","viewY","viewZ","constructor","stride","isNonNegativeInteger","isPrimitive","offsetView","require$$6","minViewBufferIndex","require$$7","require$$8","offsetX","offsetY","offsetZ","yset","unary_1","unary_ndarray","unary","ns","promotionRules","safeCasts","resolveEnum","resolveStr","intersection","list1","list2","out","M","j","push","dtypes1","dtypes2","dtypes3","options","cache","casts","opts","tmp","dt1","dt2","dt3","t1","t2","t3","t4","arguments","Error","sort","enums","wrap","C64","C128","CTORS","resolveCallback","table","default","signatures","mask","strideMask","im","offsetMask","require$$9","require$$10","require$$11","require$$12","require$$13","clbk","thisArg","call","require$$14","require$$15","require$$16","setReadOnlyAccessor","dtypes2signatures","meta","obj","nargs","nin","nout","require$$17","require$$18","mskunary","sm","m","require$$19","nullary","require$$20","require$$21","quaternary","sw","su","iw","iu","w","u","require$$22","quinary","sv","iv","require$$23","require$$24","require$$25","require$$26","require$$27","require$$28","require$$29","ternary","require$$30","require$$31","require$$32","require$$33","index_of_types","strideX1","strideX2","isPositiveInteger","isInteger","isFunctionArray","isCollection","abs","indexOfTypes","fcns","types","data","strideArgs","hasOffsets","narrays","nfcns","iout","argc","f","RangeError","base","dispatch"],"mappings":"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"}